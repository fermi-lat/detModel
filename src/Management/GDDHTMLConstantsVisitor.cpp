#include <string>
#include <iostream>
#include <fstream>
#include <vector>

#include "detModel/GDD.h"
#include "detModel/Constants/GDDconstants.h"
#include "detModel/Constants/GDDconstCategory.h"
#include "detModel/Constants/GDDintConst.h"
#include "detModel/Constants/GDDfloatConst.h"
#include "detModel/Constants/GDDstringConst.h"
#include "detModel/Constants/GDDdoubleConst.h"

#include "detModel/Management/GDDHTMLConstantsVisitor.h"

GDDHTMLConstantsVisitor::GDDHTMLConstantsVisitor()
{
  setRecursive(0);
  out.open("constants.html");
}

GDDHTMLConstantsVisitor::~GDDHTMLConstantsVisitor()
{
  out.close();
}


void GDDHTMLConstantsVisitor::visitGDD(GDD* gdd)
{

  out << "<html>" << std::endl;
  out << "<head>" << std::endl;
  out << "<title>Detector Constants</title>" << std::endl;
  out << "</head>" << std::endl;
  out << "<body>" << std::endl;

  gdd->getConstants()->AcceptNotRec(this);

  out << "Generated by detModel from " << gdd->getCVSid() << std::endl;  
  out << "</body>" << std::endl;  
  out << "</html>" << std::endl;  
}
  
void  GDDHTMLConstantsVisitor::visitConstants(GDDconstants* constants)
{
  unsigned int i;

  out << "<H1> Detector Constants version " << constants->getVersion()  
	    << "</H1>" <<std::endl;

  for(i=0; i<constants->getCategories().size();i++){
    ((constants->getCategories() )[i])->AcceptNotRec(this);}    
}

void  GDDHTMLConstantsVisitor::visitConstCategory(GDDconstCategory* category)
{
  unsigned int i;

  if (category->getPrimary())
    out << "<h2>Primary Category <font color=\"#f08000\">" << 
      category->getName() << "</font> </h2>" << std::endl;
  else
    out << "<h2>Derived Category <font color=\"#f08000\">" << 
      category->getName() << "</font> </h2>" << std::endl;

  out << "<strong><font color=\"#208020\">Overview:</font></strong> &nbsp;" 
	    << category->getOverview() << "<br> &nbsp;<br>" << std::endl;

  out << " <table cellpadding=\"3\" border=\"1\">" << std::endl;
  if (category->getPrimary()) 
    out << "<tr bgcolor=\"#c0ffc0\" align=\"left\">" << std::endl;
  else
    out << "<tr bgcolor=\"#c0coff\" align=\"left\">" << std::endl;
  out << "<th>Name</th><th>Value</th><th>Description</th> </tr>" << std::endl;

  for(i=0; i<category->getConsts().size();i++){
    GDDconst* c = (category->getConsts() )[i];

    out << "<tr>" << std::endl;
    out << "<td><b>" << c->getName() << "</b></td>" << std::endl;    
    c->AcceptNotRec(this);
    
    if(c->getConstMeaning() == GDDconst::length)
      out <<  " " << c->getUnitLength();

    out << "</td>" << std::endl;
    out << "<td>" << c->getNote() << "</td>" << std::endl;     
    out << "</tr>" << std::endl;
  }
  
  out << "</table> <br> &nbsp;<br>" << std::endl;
  

}

void  GDDHTMLConstantsVisitor::visitIntConst(GDDintConst* c)
{
  out << "<td>" << c->getValue();
}

void  GDDHTMLConstantsVisitor::visitFloatConst(GDDfloatConst* c)
{
  out << "<td>" << c->getValue();
}

void  GDDHTMLConstantsVisitor::visitDoubleConst(GDDdoubleConst* c)
{
  out << "<td>" << c->getValue();
}

void  GDDHTMLConstantsVisitor::visitStringConst(GDDstringConst* c)
{
  out << "<td>" << c->getValue();
}













